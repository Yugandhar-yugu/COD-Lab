Program 1:
Statement: Write an assembly language for addition of 2 words
Observation - Single Cycle
This program loads 2 32bit words from a, a+4 into registers x11 and x12.It then performs the add operation and stores the result in register x13 with an offset of 8bits
Register Mapping
x11-0x00001111
x12-0x12345678
x13-0x12346789
Data Mapping
-0x10000000 - 0x00001111 -0x10000004 - 0x12345678 -0x10000008 - 0x12346789


Program 2:
Statement: Write an assembly language for addition of 2 half words
Name of file:
Observation - Single Cycle
This program loads 2 16bit words from a, a+2 into registers x11 and x12.
It then performs the add operation and stores the result in register x13 with an offset of 4bits
And we can see the result x12+x13 stored in x14 register.
Register Mapping
x12 - 0x00006641
x13 - 0x00000008
x14 - 0x00006649
Data Mapping
0x10000004 - 0x00006649
0x10000000 - 0x00086641


Program 3:

Statement: Write an assembly program for addition of 2 bytes.
Name of file:
Observation - Single Cycle
.data section: stores 2, 8bit byte values in memory 0x01 and 0x12
.text part loads the byte at register x11 and since we use lb 0x01 is stored with sign extension same way 0x12 is also stored in register x12
Add operation is performed between x11 and x12 (0x01+0x12=0x13) and the sb instruction stores the bit into register x13.
Register Mapping
x11 - 0x00000052
x12 - 0x00000033
x13 - 0x00000085
Data Mapping
0x10000004 - 0x00000000
0x10000000 - 0x00853352


Program 4:

Statement: Write an Assembly Program and analyse the format of storing signed and unsigned words, half words and byte data types
Name of file:
Observation - Single Cycle
-We should use lhu and lbu for unsigned half word and unsigned byte type instructions.

As observed we it is executed as unsigned the MSB is appended as '1' while for same input values the MSB appended as 'f' for signed execution for both half word and byte type.
If the MSB is '0' then it is considered as positive number and if the MSB is '1' then it is negative number
Register Mapping (half word)
x11 - 0xffff8fff
x12 - 0x00000001
x13 - 0xffff9000
Data Mapping (half word)
0x10000004 - 0xffff8fff
0x10000000 - 0x00018fff
Register Mapping (byte)
x11 - 0xfffffffe
x12 - 0x00000001
x13 - 0xffffffff
Data Mapping (byte)
0x10000004 - 0x00000000
0x10000000 - 0x00ff01fe